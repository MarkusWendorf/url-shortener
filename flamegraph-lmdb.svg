<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="144945"><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.01%)</title><rect x="0.0980%" y="277" width="0.0138%" height="15" fill="rgb(227,0,7)" fg:x="142" fg:w="20"/><text x="0.3480%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (39 samples, 0.03%)</title><rect x="0.1359%" y="245" width="0.0269%" height="15" fill="rgb(217,0,24)" fg:x="197" fg:w="39"/><text x="0.3859%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (61 samples, 0.04%)</title><rect x="0.1221%" y="261" width="0.0421%" height="15" fill="rgb(221,193,54)" fg:x="177" fg:w="61"/><text x="0.3721%" y="271.50"></text></g><g><title>url-shortener`std::sys::pal::unix::time::Timespec::now (67 samples, 0.05%)</title><rect x="0.1207%" y="277" width="0.0462%" height="15" fill="rgb(248,212,6)" fg:x="175" fg:w="67"/><text x="0.3707%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`kevent (276 samples, 0.19%)</title><rect x="0.1856%" y="245" width="0.1904%" height="15" fill="rgb(208,68,35)" fg:x="269" fg:w="276"/><text x="0.4356%" y="255.50"></text></g><g><title>url-shortener`tokio::runtime::io::scheduled_io::ScheduledIo::wake (67 samples, 0.05%)</title><rect x="0.3939%" y="229" width="0.0462%" height="15" fill="rgb(232,128,0)" fg:x="571" fg:w="67"/><text x="0.6439%" y="239.50"></text></g><g><title>url-shortener`tokio::runtime::task::waker::wake_by_val (28 samples, 0.02%)</title><rect x="0.4208%" y="213" width="0.0193%" height="15" fill="rgb(207,160,47)" fg:x="610" fg:w="28"/><text x="0.6708%" y="223.50"></text></g><g><title>url-shortener`tokio::runtime::task::raw::schedule (24 samples, 0.02%)</title><rect x="0.4236%" y="197" width="0.0166%" height="15" fill="rgb(228,23,34)" fg:x="614" fg:w="24"/><text x="0.6736%" y="207.50"></text></g><g><title>url-shortener`tokio::runtime::io::driver::Driver::turn (93 samples, 0.06%)</title><rect x="0.3774%" y="245" width="0.0642%" height="15" fill="rgb(218,30,26)" fg:x="547" fg:w="93"/><text x="0.6274%" y="255.50"></text></g><g><title>url-shortener`tokio::runtime::time::Driver::park_internal (393 samples, 0.27%)</title><rect x="0.1808%" y="261" width="0.2711%" height="15" fill="rgb(220,122,19)" fg:x="262" fg:w="393"/><text x="0.4308%" y="271.50"></text></g><g><title>url-shortener`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (416 samples, 0.29%)</title><rect x="0.1670%" y="277" width="0.2870%" height="15" fill="rgb(250,228,42)" fg:x="242" fg:w="416"/><text x="0.4170%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.01%)</title><rect x="0.5216%" y="245" width="0.0145%" height="15" fill="rgb(240,193,28)" fg:x="756" fg:w="21"/><text x="0.7716%" y="255.50"></text></g><g><title>url-shortener`tokio::runtime::context::with_scheduler (41 samples, 0.03%)</title><rect x="0.5388%" y="245" width="0.0283%" height="15" fill="rgb(216,20,37)" fg:x="781" fg:w="41"/><text x="0.7888%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.01%)</title><rect x="0.6002%" y="229" width="0.0124%" height="15" fill="rgb(206,188,39)" fg:x="870" fg:w="18"/><text x="0.8502%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="0.6161%" y="229" width="0.0138%" height="15" fill="rgb(217,207,13)" fg:x="893" fg:w="20"/><text x="0.8661%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.02%)</title><rect x="0.9583%" y="213" width="0.0179%" height="15" fill="rgb(231,73,38)" fg:x="1389" fg:w="26"/><text x="1.2083%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.02%)</title><rect x="0.9831%" y="213" width="0.0179%" height="15" fill="rgb(225,20,46)" fg:x="1425" fg:w="26"/><text x="1.2331%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.01%)</title><rect x="1.0528%" y="181" width="0.0138%" height="15" fill="rgb(210,31,41)" fg:x="1526" fg:w="20"/><text x="1.3028%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (102 samples, 0.07%)</title><rect x="1.0011%" y="213" width="0.0704%" height="15" fill="rgb(221,200,47)" fg:x="1451" fg:w="102"/><text x="1.2511%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (67 samples, 0.05%)</title><rect x="1.0252%" y="197" width="0.0462%" height="15" fill="rgb(226,26,5)" fg:x="1486" fg:w="67"/><text x="1.2752%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (31 samples, 0.02%)</title><rect x="1.0887%" y="197" width="0.0214%" height="15" fill="rgb(249,33,26)" fg:x="1578" fg:w="31"/><text x="1.3387%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (30 samples, 0.02%)</title><rect x="1.1404%" y="181" width="0.0207%" height="15" fill="rgb(235,183,28)" fg:x="1653" fg:w="30"/><text x="1.3904%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (16 samples, 0.01%)</title><rect x="1.2308%" y="165" width="0.0110%" height="15" fill="rgb(221,5,38)" fg:x="1784" fg:w="16"/><text x="1.4808%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (279 samples, 0.19%)</title><rect x="1.0721%" y="213" width="0.1925%" height="15" fill="rgb(247,18,42)" fg:x="1554" fg:w="279"/><text x="1.3221%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (218 samples, 0.15%)</title><rect x="1.1142%" y="197" width="0.1504%" height="15" fill="rgb(241,131,45)" fg:x="1615" fg:w="218"/><text x="1.3642%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (150 samples, 0.10%)</title><rect x="1.1611%" y="181" width="0.1035%" height="15" fill="rgb(249,31,29)" fg:x="1683" fg:w="150"/><text x="1.4111%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.02%)</title><rect x="1.2419%" y="165" width="0.0228%" height="15" fill="rgb(225,111,53)" fg:x="1800" fg:w="33"/><text x="1.4919%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (21 samples, 0.01%)</title><rect x="1.2701%" y="213" width="0.0145%" height="15" fill="rgb(238,160,17)" fg:x="1841" fg:w="21"/><text x="1.5201%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.02%)</title><rect x="1.2846%" y="213" width="0.0235%" height="15" fill="rgb(214,148,48)" fg:x="1862" fg:w="34"/><text x="1.5346%" y="223.50"></text></g><g><title>url-shortener`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::incoming::Incoming&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (46 samples, 0.03%)</title><rect x="1.3412%" y="213" width="0.0317%" height="15" fill="rgb(232,36,49)" fg:x="1944" fg:w="46"/><text x="1.5912%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.01%)</title><rect x="1.5185%" y="197" width="0.0138%" height="15" fill="rgb(209,103,24)" fg:x="2201" fg:w="20"/><text x="1.7685%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.03%)</title><rect x="1.5537%" y="181" width="0.0310%" height="15" fill="rgb(229,88,8)" fg:x="2252" fg:w="45"/><text x="1.8037%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (38 samples, 0.03%)</title><rect x="1.5585%" y="165" width="0.0262%" height="15" fill="rgb(213,181,19)" fg:x="2259" fg:w="38"/><text x="1.8085%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.01%)</title><rect x="1.5703%" y="149" width="0.0145%" height="15" fill="rgb(254,191,54)" fg:x="2276" fg:w="21"/><text x="1.8203%" y="159.50"></text></g><g><title>url-shortener`bytes::bytes_mut::BytesMut::split_to (56 samples, 0.04%)</title><rect x="1.5516%" y="197" width="0.0386%" height="15" fill="rgb(241,83,37)" fg:x="2249" fg:w="56"/><text x="1.8016%" y="207.50"></text></g><g><title>url-shortener`http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (26 samples, 0.02%)</title><rect x="1.5999%" y="197" width="0.0179%" height="15" fill="rgb(233,36,39)" fg:x="2319" fg:w="26"/><text x="1.8499%" y="207.50"></text></g><g><title>url-shortener`http::header::name::parse_hdr (120 samples, 0.08%)</title><rect x="1.6379%" y="197" width="0.0828%" height="15" fill="rgb(226,3,54)" fg:x="2374" fg:w="120"/><text x="1.8879%" y="207.50"></text></g><g><title>url-shortener`http::uri::path::PathAndQuery::from_shared (42 samples, 0.03%)</title><rect x="1.7207%" y="197" width="0.0290%" height="15" fill="rgb(245,192,40)" fg:x="2494" fg:w="42"/><text x="1.9707%" y="207.50"></text></g><g><title>url-shortener`&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (669 samples, 0.46%)</title><rect x="1.3736%" y="213" width="0.4616%" height="15" fill="rgb(238,167,29)" fg:x="1991" fg:w="669"/><text x="1.6236%" y="223.50"></text></g><g><title>url-shortener`httparse::parse_headers_iter_uninit (124 samples, 0.09%)</title><rect x="1.7496%" y="197" width="0.0855%" height="15" fill="rgb(232,182,51)" fg:x="2536" fg:w="124"/><text x="1.9996%" y="207.50"></text></g><g><title>url-shortener`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (82 samples, 0.06%)</title><rect x="1.8448%" y="213" width="0.0566%" height="15" fill="rgb(231,60,39)" fg:x="2674" fg:w="82"/><text x="2.0948%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.05%)</title><rect x="1.8531%" y="197" width="0.0483%" height="15" fill="rgb(208,69,12)" fg:x="2686" fg:w="70"/><text x="2.1031%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (60 samples, 0.04%)</title><rect x="1.8600%" y="181" width="0.0414%" height="15" fill="rgb(235,93,37)" fg:x="2696" fg:w="60"/><text x="2.1100%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (41 samples, 0.03%)</title><rect x="1.8731%" y="165" width="0.0283%" height="15" fill="rgb(213,116,39)" fg:x="2715" fg:w="41"/><text x="2.1231%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.01%)</title><rect x="1.9504%" y="197" width="0.0124%" height="15" fill="rgb(222,207,29)" fg:x="2827" fg:w="18"/><text x="2.2004%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (73 samples, 0.05%)</title><rect x="1.9628%" y="197" width="0.0504%" height="15" fill="rgb(206,96,30)" fg:x="2845" fg:w="73"/><text x="2.2128%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (54 samples, 0.04%)</title><rect x="1.9759%" y="181" width="0.0373%" height="15" fill="rgb(218,138,4)" fg:x="2864" fg:w="54"/><text x="2.2259%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.01%)</title><rect x="2.0235%" y="197" width="0.0124%" height="15" fill="rgb(250,191,14)" fg:x="2933" fg:w="18"/><text x="2.2735%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.01%)</title><rect x="2.0359%" y="197" width="0.0103%" height="15" fill="rgb(239,60,40)" fg:x="2951" fg:w="15"/><text x="2.2859%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.01%)</title><rect x="2.2084%" y="181" width="0.0145%" height="15" fill="rgb(206,27,48)" fg:x="3201" fg:w="21"/><text x="2.4584%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (37 samples, 0.03%)</title><rect x="2.2229%" y="181" width="0.0255%" height="15" fill="rgb(225,35,8)" fg:x="3222" fg:w="37"/><text x="2.4729%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (26 samples, 0.02%)</title><rect x="2.3588%" y="149" width="0.0179%" height="15" fill="rgb(250,213,24)" fg:x="3419" fg:w="26"/><text x="2.6088%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (181 samples, 0.12%)</title><rect x="2.2560%" y="181" width="0.1249%" height="15" fill="rgb(247,123,22)" fg:x="3270" fg:w="181"/><text x="2.5060%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (112 samples, 0.08%)</title><rect x="2.3036%" y="165" width="0.0773%" height="15" fill="rgb(231,138,38)" fg:x="3339" fg:w="112"/><text x="2.5536%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.02%)</title><rect x="2.4237%" y="149" width="0.0186%" height="15" fill="rgb(231,145,46)" fg:x="3513" fg:w="27"/><text x="2.6737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (153 samples, 0.11%)</title><rect x="2.3809%" y="181" width="0.1056%" height="15" fill="rgb(251,118,11)" fg:x="3451" fg:w="153"/><text x="2.6309%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (123 samples, 0.08%)</title><rect x="2.4016%" y="165" width="0.0849%" height="15" fill="rgb(217,147,25)" fg:x="3481" fg:w="123"/><text x="2.6516%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (64 samples, 0.04%)</title><rect x="2.4423%" y="149" width="0.0442%" height="15" fill="rgb(247,81,37)" fg:x="3540" fg:w="64"/><text x="2.6923%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (53 samples, 0.04%)</title><rect x="2.4892%" y="181" width="0.0366%" height="15" fill="rgb(209,12,38)" fg:x="3608" fg:w="53"/><text x="2.7392%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.01%)</title><rect x="2.5258%" y="181" width="0.0117%" height="15" fill="rgb(227,1,9)" fg:x="3661" fg:w="17"/><text x="2.7758%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2,568 samples, 1.77%)</title><rect x="2.5644%" y="165" width="1.7717%" height="15" fill="rgb(248,47,43)" fg:x="3717" fg:w="2568"/><text x="2.8144%" y="175.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2,620 samples, 1.81%)</title><rect x="2.5375%" y="181" width="1.8076%" height="15" fill="rgb(221,10,30)" fg:x="3678" fg:w="2620"/><text x="2.7875%" y="191.50">l..</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (2,203 samples, 1.52%)</title><rect x="4.3513%" y="165" width="1.5199%" height="15" fill="rgb(210,229,1)" fg:x="6307" fg:w="2203"/><text x="4.6013%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2,214 samples, 1.53%)</title><rect x="4.3479%" y="181" width="1.5275%" height="15" fill="rgb(222,148,37)" fg:x="6302" fg:w="2214"/><text x="4.5979%" y="191.50"></text></g><g><title>url-shortener`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (43 samples, 0.03%)</title><rect x="5.8802%" y="181" width="0.0297%" height="15" fill="rgb(234,67,33)" fg:x="8523" fg:w="43"/><text x="6.1302%" y="191.50"></text></g><g><title>url-shortener`http::header::map::HeaderMap&lt;T&gt;::try_insert2 (21 samples, 0.01%)</title><rect x="5.9264%" y="149" width="0.0145%" height="15" fill="rgb(247,98,35)" fg:x="8590" fg:w="21"/><text x="6.1764%" y="159.50"></text></g><g><title>url-shortener`&lt;[(K,V) (48 samples, 0.03%)</title><rect x="5.9098%" y="181" width="0.0331%" height="15" fill="rgb(247,138,52)" fg:x="8566" fg:w="48"/><text x="6.1598%" y="191.50"></text></g><g><title> N] as axum_core::response::into_response_parts::IntoResponseParts&gt;::into_response_parts (48 samples, 0.03%)</title><rect x="5.9098%" y="165" width="0.0331%" height="15" fill="rgb(213,79,30)" fg:x="8566" fg:w="48"/><text x="6.1598%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (74 samples, 0.05%)</title><rect x="6.0685%" y="165" width="0.0511%" height="15" fill="rgb(246,177,23)" fg:x="8796" fg:w="74"/><text x="6.3185%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (40 samples, 0.03%)</title><rect x="6.0920%" y="149" width="0.0276%" height="15" fill="rgb(230,62,27)" fg:x="8830" fg:w="40"/><text x="6.3420%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (69 samples, 0.05%)</title><rect x="6.1196%" y="165" width="0.0476%" height="15" fill="rgb(216,154,8)" fg:x="8870" fg:w="69"/><text x="6.3696%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (48 samples, 0.03%)</title><rect x="6.1341%" y="149" width="0.0331%" height="15" fill="rgb(244,35,45)" fg:x="8891" fg:w="48"/><text x="6.3841%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (33 samples, 0.02%)</title><rect x="6.1444%" y="133" width="0.0228%" height="15" fill="rgb(251,115,12)" fg:x="8906" fg:w="33"/><text x="6.3944%" y="143.50"></text></g><g><title>url-shortener`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (33 samples, 0.02%)</title><rect x="6.1810%" y="165" width="0.0228%" height="15" fill="rgb(240,54,50)" fg:x="8959" fg:w="33"/><text x="6.4310%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 0.04%)</title><rect x="6.2168%" y="149" width="0.0442%" height="15" fill="rgb(233,84,52)" fg:x="9011" fg:w="64"/><text x="6.4668%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.03%)</title><rect x="6.2286%" y="133" width="0.0324%" height="15" fill="rgb(207,117,47)" fg:x="9028" fg:w="47"/><text x="6.4786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.02%)</title><rect x="6.2851%" y="133" width="0.0172%" height="15" fill="rgb(249,43,39)" fg:x="9110" fg:w="25"/><text x="6.5351%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.01%)</title><rect x="6.2907%" y="117" width="0.0117%" height="15" fill="rgb(209,38,44)" fg:x="9118" fg:w="17"/><text x="6.5407%" y="127.50"></text></g><g><title>url-shortener`&lt;serde_path_to_error::Chain as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="6.2803%" y="149" width="0.0228%" height="15" fill="rgb(236,212,23)" fg:x="9103" fg:w="33"/><text x="6.5303%" y="159.50"></text></g><g><title>url-shortener`&lt;serde_path_to_error::de::TrackedSeed&lt;X&gt; as serde::de::DeserializeSeed&gt;::deserialize (174 samples, 0.12%)</title><rect x="6.2058%" y="165" width="0.1200%" height="15" fill="rgb(242,79,21)" fg:x="8995" fg:w="174"/><text x="6.4558%" y="175.50"></text></g><g><title>url-shortener`serde_path_to_error::de::_&lt;impl serde::de::Visitor for serde_path_to_error::wrap::Wrap&lt;X&gt;&gt;::visit_borrowed_str (31 samples, 0.02%)</title><rect x="6.3045%" y="149" width="0.0214%" height="15" fill="rgb(211,96,35)" fg:x="9138" fg:w="31"/><text x="6.5545%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.02%)</title><rect x="6.3045%" y="133" width="0.0214%" height="15" fill="rgb(253,215,40)" fg:x="9138" fg:w="31"/><text x="6.5545%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.02%)</title><rect x="6.3100%" y="117" width="0.0159%" height="15" fill="rgb(211,81,21)" fg:x="9146" fg:w="23"/><text x="6.5600%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.01%)</title><rect x="6.4197%" y="117" width="0.0117%" height="15" fill="rgb(208,190,38)" fg:x="9305" fg:w="17"/><text x="6.6697%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (75 samples, 0.05%)</title><rect x="6.3838%" y="149" width="0.0517%" height="15" fill="rgb(235,213,38)" fg:x="9253" fg:w="75"/><text x="6.6338%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (51 samples, 0.04%)</title><rect x="6.4004%" y="133" width="0.0352%" height="15" fill="rgb(237,122,38)" fg:x="9277" fg:w="51"/><text x="6.6504%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.02%)</title><rect x="6.4355%" y="149" width="0.0241%" height="15" fill="rgb(244,218,35)" fg:x="9328" fg:w="35"/><text x="6.6855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.02%)</title><rect x="6.4390%" y="133" width="0.0207%" height="15" fill="rgb(240,68,47)" fg:x="9333" fg:w="30"/><text x="6.6890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.02%)</title><rect x="6.4445%" y="117" width="0.0152%" height="15" fill="rgb(210,16,53)" fg:x="9341" fg:w="22"/><text x="6.6945%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.01%)</title><rect x="6.5797%" y="69" width="0.0138%" height="15" fill="rgb(235,124,12)" fg:x="9537" fg:w="20"/><text x="6.8297%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (108 samples, 0.07%)</title><rect x="6.5239%" y="101" width="0.0745%" height="15" fill="rgb(224,169,11)" fg:x="9456" fg:w="108"/><text x="6.7739%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 0.04%)</title><rect x="6.5570%" y="85" width="0.0414%" height="15" fill="rgb(250,166,2)" fg:x="9504" fg:w="60"/><text x="6.8070%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.01%)</title><rect x="6.6611%" y="53" width="0.0103%" height="15" fill="rgb(242,216,29)" fg:x="9655" fg:w="15"/><text x="6.9111%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (69 samples, 0.05%)</title><rect x="6.6294%" y="85" width="0.0476%" height="15" fill="rgb(230,116,27)" fg:x="9609" fg:w="69"/><text x="6.8794%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.03%)</title><rect x="6.6432%" y="69" width="0.0338%" height="15" fill="rgb(228,99,48)" fg:x="9629" fg:w="49"/><text x="6.8932%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.03%)</title><rect x="6.6901%" y="69" width="0.0255%" height="15" fill="rgb(253,11,6)" fg:x="9697" fg:w="37"/><text x="6.9401%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (29 samples, 0.02%)</title><rect x="6.6956%" y="53" width="0.0200%" height="15" fill="rgb(247,143,39)" fg:x="9705" fg:w="29"/><text x="6.9456%" y="63.50"></text></g><g><title>url-shortener`&lt;futures_channel::mpsc::queue::Queue&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="6.6832%" y="85" width="0.0338%" height="15" fill="rgb(236,97,10)" fg:x="9687" fg:w="49"/><text x="6.9332%" y="95.50"></text></g><g><title>url-shortener`alloc::sync::Arc&lt;T,A&gt;::drop_slow (144 samples, 0.10%)</title><rect x="6.6184%" y="101" width="0.0993%" height="15" fill="rgb(233,208,19)" fg:x="9593" fg:w="144"/><text x="6.8684%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (31 samples, 0.02%)</title><rect x="6.7225%" y="85" width="0.0214%" height="15" fill="rgb(216,164,2)" fg:x="9744" fg:w="31"/><text x="6.9725%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.02%)</title><rect x="6.7281%" y="69" width="0.0159%" height="15" fill="rgb(220,129,5)" fg:x="9752" fg:w="23"/><text x="6.9781%" y="79.50"></text></g><g><title>url-shortener`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (355 samples, 0.24%)</title><rect x="6.5025%" y="117" width="0.2449%" height="15" fill="rgb(242,17,10)" fg:x="9425" fg:w="355"/><text x="6.7525%" y="127.50"></text></g><g><title>url-shortener`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (43 samples, 0.03%)</title><rect x="6.7177%" y="101" width="0.0297%" height="15" fill="rgb(242,107,0)" fg:x="9737" fg:w="43"/><text x="6.9677%" y="111.50"></text></g><g><title>url-shortener`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (393 samples, 0.27%)</title><rect x="6.4797%" y="133" width="0.2711%" height="15" fill="rgb(251,28,31)" fg:x="9392" fg:w="393"/><text x="6.7297%" y="143.50"></text></g><g><title>url-shortener`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (409 samples, 0.28%)</title><rect x="6.4714%" y="149" width="0.2822%" height="15" fill="rgb(233,223,10)" fg:x="9380" fg:w="409"/><text x="6.7214%" y="159.50"></text></g><g><title>url-shortener`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (32 samples, 0.02%)</title><rect x="6.7564%" y="133" width="0.0221%" height="15" fill="rgb(215,21,27)" fg:x="9793" fg:w="32"/><text x="7.0064%" y="143.50"></text></g><g><title>url-shortener`alloc::raw_vec::finish_grow (29 samples, 0.02%)</title><rect x="6.7584%" y="117" width="0.0200%" height="15" fill="rgb(232,23,21)" fg:x="9796" fg:w="29"/><text x="7.0084%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.02%)</title><rect x="6.7591%" y="101" width="0.0193%" height="15" fill="rgb(244,5,23)" fg:x="9797" fg:w="28"/><text x="7.0091%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.02%)</title><rect x="6.7626%" y="85" width="0.0159%" height="15" fill="rgb(226,81,46)" fg:x="9802" fg:w="23"/><text x="7.0126%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.01%)</title><rect x="6.7674%" y="69" width="0.0110%" height="15" fill="rgb(247,70,30)" fg:x="9809" fg:w="16"/><text x="7.0174%" y="79.50"></text></g><g><title>url-shortener`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (36 samples, 0.02%)</title><rect x="6.7543%" y="149" width="0.0248%" height="15" fill="rgb(212,68,19)" fg:x="9790" fg:w="36"/><text x="7.0043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.01%)</title><rect x="6.7867%" y="133" width="0.0145%" height="15" fill="rgb(240,187,13)" fg:x="9837" fg:w="21"/><text x="7.0367%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (33 samples, 0.02%)</title><rect x="6.8012%" y="133" width="0.0228%" height="15" fill="rgb(223,113,26)" fg:x="9858" fg:w="33"/><text x="7.0512%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.01%)</title><rect x="6.8115%" y="117" width="0.0124%" height="15" fill="rgb(206,192,2)" fg:x="9873" fg:w="18"/><text x="7.0615%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.02%)</title><rect x="6.8985%" y="85" width="0.0200%" height="15" fill="rgb(241,108,4)" fg:x="9999" fg:w="29"/><text x="7.1485%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (125 samples, 0.09%)</title><rect x="6.8398%" y="117" width="0.0862%" height="15" fill="rgb(247,173,49)" fg:x="9914" fg:w="125"/><text x="7.0898%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (83 samples, 0.06%)</title><rect x="6.8688%" y="101" width="0.0573%" height="15" fill="rgb(224,114,35)" fg:x="9956" fg:w="83"/><text x="7.1188%" y="111.50"></text></g><g><title>url-shortener`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (171 samples, 0.12%)</title><rect x="6.8247%" y="133" width="0.1180%" height="15" fill="rgb(245,159,27)" fg:x="9892" fg:w="171"/><text x="7.0747%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.01%)</title><rect x="7.0413%" y="85" width="0.0131%" height="15" fill="rgb(245,172,44)" fg:x="10206" fg:w="19"/><text x="7.2913%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (156 samples, 0.11%)</title><rect x="6.9516%" y="117" width="0.1076%" height="15" fill="rgb(236,23,11)" fg:x="10076" fg:w="156"/><text x="7.2016%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (120 samples, 0.08%)</title><rect x="6.9764%" y="101" width="0.0828%" height="15" fill="rgb(205,117,38)" fg:x="10112" fg:w="120"/><text x="7.2264%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.01%)</title><rect x="7.0599%" y="117" width="0.0110%" height="15" fill="rgb(237,72,25)" fg:x="10233" fg:w="16"/><text x="7.3099%" y="127.50"></text></g><g><title>url-shortener`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="7.0710%" y="117" width="0.0131%" height="15" fill="rgb(244,70,9)" fg:x="10249" fg:w="19"/><text x="7.3210%" y="127.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;http::request::Parts&gt; (441 samples, 0.30%)</title><rect x="6.7812%" y="149" width="0.3043%" height="15" fill="rgb(217,125,39)" fg:x="9829" fg:w="441"/><text x="7.0312%" y="159.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (200 samples, 0.14%)</title><rect x="6.9475%" y="133" width="0.1380%" height="15" fill="rgb(235,36,10)" fg:x="10070" fg:w="200"/><text x="7.1975%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (49 samples, 0.03%)</title><rect x="7.0861%" y="133" width="0.0338%" height="15" fill="rgb(251,123,47)" fg:x="10271" fg:w="49"/><text x="7.3361%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (37 samples, 0.03%)</title><rect x="7.0944%" y="117" width="0.0255%" height="15" fill="rgb(221,13,13)" fg:x="10283" fg:w="37"/><text x="7.3444%" y="127.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;http_body_util::collected::Collected&lt;bytes::bytes::Bytes&gt;&gt; (58 samples, 0.04%)</title><rect x="7.0854%" y="149" width="0.0400%" height="15" fill="rgb(238,131,9)" fg:x="10270" fg:w="58"/><text x="7.3354%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (38 samples, 0.03%)</title><rect x="7.1317%" y="133" width="0.0262%" height="15" fill="rgb(211,50,8)" fg:x="10337" fg:w="38"/><text x="7.3817%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.02%)</title><rect x="7.1386%" y="117" width="0.0193%" height="15" fill="rgb(245,182,24)" fg:x="10347" fg:w="28"/><text x="7.3886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.03%)</title><rect x="7.1634%" y="117" width="0.0283%" height="15" fill="rgb(242,14,37)" fg:x="10383" fg:w="41"/><text x="7.4134%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 0.02%)</title><rect x="7.1696%" y="101" width="0.0221%" height="15" fill="rgb(246,228,12)" fg:x="10392" fg:w="32"/><text x="7.4196%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.03%)</title><rect x="7.2076%" y="101" width="0.0283%" height="15" fill="rgb(213,55,15)" fg:x="10447" fg:w="41"/><text x="7.4576%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.02%)</title><rect x="7.2145%" y="85" width="0.0214%" height="15" fill="rgb(209,9,3)" fg:x="10457" fg:w="31"/><text x="7.4645%" y="95.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;http_body_util::combinators::map_err::MapErr&lt;http_body_util::limited::Limited&lt;axum_core::body::Body&gt;,axum_core::error::Error::new&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;&gt;&gt; (121 samples, 0.08%)</title><rect x="7.1600%" y="133" width="0.0835%" height="15" fill="rgb(230,59,30)" fg:x="10378" fg:w="121"/><text x="7.4100%" y="143.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (58 samples, 0.04%)</title><rect x="7.2034%" y="117" width="0.0400%" height="15" fill="rgb(209,121,21)" fg:x="10441" fg:w="58"/><text x="7.4534%" y="127.50"></text></g><g><title>url-shortener`axum_core::extract::request_parts::_&lt;impl axum_core::extract::FromRequest&lt;S&gt; for bytes::bytes::Bytes&gt;::from_request::_{{closure}} (1,324 samples, 0.91%)</title><rect x="6.3321%" y="165" width="0.9134%" height="15" fill="rgb(220,109,13)" fg:x="9178" fg:w="1324"/><text x="6.5821%" y="175.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;http_body_util::combinators::collect::Collect&lt;axum_core::body::Body&gt;&gt; (174 samples, 0.12%)</title><rect x="7.1255%" y="149" width="0.1200%" height="15" fill="rgb(232,18,1)" fg:x="10328" fg:w="174"/><text x="7.3755%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (61 samples, 0.04%)</title><rect x="7.2586%" y="149" width="0.0421%" height="15" fill="rgb(215,41,42)" fg:x="10521" fg:w="61"/><text x="7.5086%" y="159.50"></text></g><g><title>url-shortener`bytes::bytes_mut::shared_v_drop (75 samples, 0.05%)</title><rect x="7.2503%" y="165" width="0.0517%" height="15" fill="rgb(224,123,36)" fg:x="10509" fg:w="75"/><text x="7.5003%" y="175.50"></text></g><g><title>url-shortener`&lt;axum::json::Json&lt;T&gt; as axum_core::extract::FromRequest&lt;S&gt;&gt;::from_request::_{{closure}} (1,980 samples, 1.37%)</title><rect x="5.9464%" y="181" width="1.3660%" height="15" fill="rgb(240,125,3)" fg:x="8619" fg:w="1980"/><text x="6.1964%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.03%)</title><rect x="7.3166%" y="165" width="0.0283%" height="15" fill="rgb(205,98,50)" fg:x="10605" fg:w="41"/><text x="7.5666%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.02%)</title><rect x="7.3214%" y="149" width="0.0235%" height="15" fill="rgb(205,185,37)" fg:x="10612" fg:w="34"/><text x="7.5714%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.01%)</title><rect x="7.3311%" y="133" width="0.0138%" height="15" fill="rgb(238,207,15)" fg:x="10626" fg:w="20"/><text x="7.5811%" y="143.50"></text></g><g><title>url-shortener`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (48 samples, 0.03%)</title><rect x="7.3124%" y="181" width="0.0331%" height="15" fill="rgb(213,199,42)" fg:x="10599" fg:w="48"/><text x="7.5624%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__msync (113,467 samples, 78.28%)</title><rect x="7.4145%" y="149" width="78.2828%" height="15" fill="rgb(235,201,11)" fg:x="10747" fg:w="113467"/><text x="7.6645%" y="159.50">libsystem_kernel.dylib`__msync</text></g><g><title>libsystem_kernel.dylib`semop (822 samples, 0.57%)</title><rect x="85.6980%" y="149" width="0.5671%" height="15" fill="rgb(207,46,11)" fg:x="124215" fg:w="822"/><text x="85.9480%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (77 samples, 0.05%)</title><rect x="86.2782%" y="149" width="0.0531%" height="15" fill="rgb(241,35,35)" fg:x="125056" fg:w="77"/><text x="86.5282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.02%)</title><rect x="86.3079%" y="133" width="0.0235%" height="15" fill="rgb(243,32,47)" fg:x="125099" fg:w="34"/><text x="86.5579%" y="143.50"></text></g><g><title>url-shortener`mdb_env_write_meta (1,675 samples, 1.16%)</title><rect x="86.3534%" y="149" width="1.1556%" height="15" fill="rgb(247,202,23)" fg:x="125165" fg:w="1675"/><text x="86.6034%" y="159.50"></text></g><g><title>url-shortener`_mdb_cursor_put (33 samples, 0.02%)</title><rect x="87.5332%" y="133" width="0.0228%" height="15" fill="rgb(219,102,11)" fg:x="126875" fg:w="33"/><text x="87.7832%" y="143.50"></text></g><g><title>url-shortener`mdb_cursor_del0 (41 samples, 0.03%)</title><rect x="87.5560%" y="133" width="0.0283%" height="15" fill="rgb(243,110,44)" fg:x="126908" fg:w="41"/><text x="87.8060%" y="143.50"></text></g><g><title>url-shortener`mdb_rebalance (24 samples, 0.02%)</title><rect x="87.5677%" y="117" width="0.0166%" height="15" fill="rgb(222,74,54)" fg:x="126925" fg:w="24"/><text x="87.8177%" y="127.50"></text></g><g><title>url-shortener`mdb_page_search (1,344 samples, 0.93%)</title><rect x="87.5974%" y="133" width="0.9272%" height="15" fill="rgb(216,99,12)" fg:x="126968" fg:w="1344"/><text x="87.8474%" y="143.50"></text></g><g><title>url-shortener`mdb_page_touch (1,324 samples, 0.91%)</title><rect x="87.6112%" y="117" width="0.9134%" height="15" fill="rgb(226,22,26)" fg:x="126988" fg:w="1324"/><text x="87.8612%" y="127.50"></text></g><g><title>url-shortener`mdb_page_alloc (1,311 samples, 0.90%)</title><rect x="87.6201%" y="101" width="0.9045%" height="15" fill="rgb(217,163,10)" fg:x="127001" fg:w="1311"/><text x="87.8701%" y="111.50"></text></g><g><title>url-shortener`mdb_freelist_save (1,486 samples, 1.03%)</title><rect x="87.5091%" y="149" width="1.0252%" height="15" fill="rgb(213,25,53)" fg:x="126840" fg:w="1486"/><text x="87.7591%" y="159.50"></text></g><g><title>url-shortener`_mdb_txn_commit (117,643 samples, 81.16%)</title><rect x="7.3925%" y="165" width="81.1639%" height="15" fill="rgb(252,105,26)" fg:x="10715" fg:w="117643"/><text x="7.6425%" y="175.50">url-shortener`_mdb_txn_commit</text></g><g><title>url-shortener`mdb_cmp_memn (38 samples, 0.03%)</title><rect x="88.6074%" y="117" width="0.0262%" height="15" fill="rgb(220,39,43)" fg:x="128432" fg:w="38"/><text x="88.8574%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (75 samples, 0.05%)</title><rect x="88.9827%" y="101" width="0.0517%" height="15" fill="rgb(229,68,48)" fg:x="128976" fg:w="75"/><text x="89.2327%" y="111.50"></text></g><g><title>url-shortener`mdb_node_search (725 samples, 0.50%)</title><rect x="88.6336%" y="117" width="0.5002%" height="15" fill="rgb(252,8,32)" fg:x="128470" fg:w="725"/><text x="88.8836%" y="127.50"></text></g><g><title>url-shortener`mdb_cmp_memn (132 samples, 0.09%)</title><rect x="89.0427%" y="101" width="0.0911%" height="15" fill="rgb(223,20,43)" fg:x="129063" fg:w="132"/><text x="89.2927%" y="111.50"></text></g><g><title>url-shortener`mdb_cmp_memn (61 samples, 0.04%)</title><rect x="89.1745%" y="85" width="0.0421%" height="15" fill="rgb(229,81,49)" fg:x="129254" fg:w="61"/><text x="89.4245%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (76 samples, 0.05%)</title><rect x="89.6147%" y="69" width="0.0524%" height="15" fill="rgb(236,28,36)" fg:x="129892" fg:w="76"/><text x="89.8647%" y="79.50"></text></g><g><title>url-shortener`mdb_page_search (933 samples, 0.64%)</title><rect x="89.1338%" y="117" width="0.6437%" height="15" fill="rgb(249,185,26)" fg:x="129195" fg:w="933"/><text x="89.3838%" y="127.50"></text></g><g><title>url-shortener`mdb_page_search_root (920 samples, 0.63%)</title><rect x="89.1428%" y="101" width="0.6347%" height="15" fill="rgb(249,174,33)" fg:x="129208" fg:w="920"/><text x="89.3928%" y="111.50"></text></g><g><title>url-shortener`mdb_node_search (813 samples, 0.56%)</title><rect x="89.2166%" y="85" width="0.5609%" height="15" fill="rgb(233,201,37)" fg:x="129315" fg:w="813"/><text x="89.4666%" y="95.50"></text></g><g><title>url-shortener`mdb_cmp_memn (150 samples, 0.10%)</title><rect x="89.6740%" y="69" width="0.1035%" height="15" fill="rgb(221,78,26)" fg:x="129978" fg:w="150"/><text x="89.9240%" y="79.50"></text></g><g><title>url-shortener`mdb_cursor_set (1,713 samples, 1.18%)</title><rect x="88.6033%" y="133" width="1.1818%" height="15" fill="rgb(250,127,30)" fg:x="128426" fg:w="1713"/><text x="88.8533%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (960 samples, 0.66%)</title><rect x="89.7989%" y="117" width="0.6623%" height="15" fill="rgb(230,49,44)" fg:x="130159" fg:w="960"/><text x="90.0489%" y="127.50"></text></g><g><title>url-shortener`mdb_page_search (44 samples, 0.03%)</title><rect x="93.1795%" y="53" width="0.0304%" height="15" fill="rgb(229,67,23)" fg:x="135059" fg:w="44"/><text x="93.4295%" y="63.50"></text></g><g><title>url-shortener`mdb_page_search_root (42 samples, 0.03%)</title><rect x="93.1809%" y="37" width="0.0290%" height="15" fill="rgb(249,83,47)" fg:x="135061" fg:w="42"/><text x="93.4309%" y="47.50"></text></g><g><title>url-shortener`mdb_cursor_first (65 samples, 0.04%)</title><rect x="93.1691%" y="69" width="0.0448%" height="15" fill="rgb(215,43,3)" fg:x="135044" fg:w="65"/><text x="93.4191%" y="79.50"></text></g><g><title>url-shortener`mdb_cursor_get (69 samples, 0.05%)</title><rect x="93.1671%" y="85" width="0.0476%" height="15" fill="rgb(238,154,13)" fg:x="135041" fg:w="69"/><text x="93.4171%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (134 samples, 0.09%)</title><rect x="93.2181%" y="69" width="0.0924%" height="15" fill="rgb(219,56,2)" fg:x="135115" fg:w="134"/><text x="93.4681%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (117 samples, 0.08%)</title><rect x="93.2298%" y="53" width="0.0807%" height="15" fill="rgb(233,0,4)" fg:x="135132" fg:w="117"/><text x="93.4798%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 0.02%)</title><rect x="93.2926%" y="37" width="0.0179%" height="15" fill="rgb(235,30,7)" fg:x="135223" fg:w="26"/><text x="93.5426%" y="47.50"></text></g><g><title>url-shortener`mdb_midl_alloc (143 samples, 0.10%)</title><rect x="93.2174%" y="85" width="0.0987%" height="15" fill="rgb(250,79,13)" fg:x="135114" fg:w="143"/><text x="93.4674%" y="95.50"></text></g><g><title>url-shortener`mdb_cursor_touch (5,120 samples, 3.53%)</title><rect x="89.7851%" y="133" width="3.5324%" height="15" fill="rgb(211,146,34)" fg:x="130139" fg:w="5120"/><text x="90.0351%" y="143.50">url..</text></g><g><title>url-shortener`mdb_page_touch (4,133 samples, 2.85%)</title><rect x="90.4660%" y="117" width="2.8514%" height="15" fill="rgb(228,22,38)" fg:x="131126" fg:w="4133"/><text x="90.7160%" y="127.50">ur..</text></g><g><title>url-shortener`mdb_page_alloc (4,070 samples, 2.81%)</title><rect x="90.5095%" y="101" width="2.8080%" height="15" fill="rgb(235,168,5)" fg:x="131189" fg:w="4070"/><text x="90.7595%" y="111.50">ur..</text></g><g><title>url-shortener`mdb_node_add (95 samples, 0.07%)</title><rect x="93.3175%" y="133" width="0.0655%" height="15" fill="rgb(221,155,16)" fg:x="135259" fg:w="95"/><text x="93.5675%" y="143.50"></text></g><g><title>url-shortener`mdb_page_split (32 samples, 0.02%)</title><rect x="93.3871%" y="133" width="0.0221%" height="15" fill="rgb(215,215,53)" fg:x="135360" fg:w="32"/><text x="93.6371%" y="143.50"></text></g><g><title>url-shortener`_mdb_cursor_put (7,016 samples, 4.84%)</title><rect x="88.5708%" y="149" width="4.8405%" height="15" fill="rgb(223,4,10)" fg:x="128379" fg:w="7016"/><text x="88.8208%" y="159.50">url-sh..</text></g><g><title>url-shortener`mdb_put (7,029 samples, 4.85%)</title><rect x="88.5653%" y="165" width="4.8494%" height="15" fill="rgb(234,103,6)" fg:x="128371" fg:w="7029"/><text x="88.8153%" y="175.50">url-sh..</text></g><g><title>libsystem_kernel.dylib`semop (842 samples, 0.58%)</title><rect x="93.4182%" y="149" width="0.5809%" height="15" fill="rgb(227,97,0)" fg:x="135405" fg:w="842"/><text x="93.6682%" y="159.50"></text></g><g><title>url-shortener`mdb_txn_begin (873 samples, 0.60%)</title><rect x="93.4147%" y="165" width="0.6023%" height="15" fill="rgb(234,150,53)" fg:x="135400" fg:w="873"/><text x="93.6647%" y="175.50"></text></g><g><title>url-shortener`&lt;url_shortener::storage::lmdb::LmdbStorage as url_shortener::storage::storage::Storage&gt;::set (125,614 samples, 86.66%)</title><rect x="7.3580%" y="181" width="86.6632%" height="15" fill="rgb(228,201,54)" fg:x="10665" fg:w="125614"/><text x="7.6080%" y="191.50">url-shortener`&lt;url_shortener::storage::lmdb::LmdbStorage as url_shortener::storage::storage::Storage&gt;::set</text></g><g><title>url-shortener`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (32 samples, 0.02%)</title><rect x="94.0364%" y="181" width="0.0221%" height="15" fill="rgb(222,22,37)" fg:x="136301" fg:w="32"/><text x="94.2864%" y="191.50"></text></g><g><title>url-shortener`alloc::raw_vec::finish_grow (23 samples, 0.02%)</title><rect x="94.0426%" y="165" width="0.0159%" height="15" fill="rgb(237,53,32)" fg:x="136310" fg:w="23"/><text x="94.2926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.01%)</title><rect x="94.0446%" y="149" width="0.0138%" height="15" fill="rgb(233,25,53)" fg:x="136313" fg:w="20"/><text x="94.2946%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.03%)</title><rect x="94.0612%" y="165" width="0.0304%" height="15" fill="rgb(210,40,34)" fg:x="136337" fg:w="44"/><text x="94.3112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 0.03%)</title><rect x="94.0660%" y="149" width="0.0255%" height="15" fill="rgb(241,220,44)" fg:x="136344" fg:w="37"/><text x="94.3160%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.02%)</title><rect x="94.0715%" y="133" width="0.0200%" height="15" fill="rgb(235,28,35)" fg:x="136352" fg:w="29"/><text x="94.3215%" y="143.50"></text></g><g><title>url-shortener`axum_core::body::Body::new (47 samples, 0.03%)</title><rect x="94.0598%" y="181" width="0.0324%" height="15" fill="rgb(210,56,17)" fg:x="136335" fg:w="47"/><text x="94.3098%" y="191.50"></text></g><g><title>url-shortener`http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (15 samples, 0.01%)</title><rect x="94.1012%" y="181" width="0.0103%" height="15" fill="rgb(224,130,29)" fg:x="136395" fg:w="15"/><text x="94.3512%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (105 samples, 0.07%)</title><rect x="94.1178%" y="165" width="0.0724%" height="15" fill="rgb(235,212,8)" fg:x="136419" fg:w="105"/><text x="94.3678%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (90 samples, 0.06%)</title><rect x="94.1281%" y="149" width="0.0621%" height="15" fill="rgb(223,33,50)" fg:x="136434" fg:w="90"/><text x="94.3781%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (65 samples, 0.04%)</title><rect x="94.1454%" y="133" width="0.0448%" height="15" fill="rgb(219,149,13)" fg:x="136459" fg:w="65"/><text x="94.3954%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.01%)</title><rect x="94.1799%" y="117" width="0.0103%" height="15" fill="rgb(250,156,29)" fg:x="136509" fg:w="15"/><text x="94.4299%" y="127.50"></text></g><g><title>url-shortener`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (116 samples, 0.08%)</title><rect x="94.1116%" y="181" width="0.0800%" height="15" fill="rgb(216,193,19)" fg:x="136410" fg:w="116"/><text x="94.3616%" y="191.50"></text></g><g><title>url-shortener`&lt;F as axum::handler::Handler&lt;(M,T1,T2),S&gt;&gt;::call::_{{closure}} (133,578 samples, 92.16%)</title><rect x="2.0504%" y="197" width="92.1577%" height="15" fill="rgb(216,135,14)" fg:x="2972" fg:w="133578"/><text x="2.3004%" y="207.50">url-shortener`&lt;F as axum::handler::Handler&lt;(M,T1,T2),S&gt;&gt;::call::_{{closure}}</text></g><g><title>url-shortener`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="94.2157%" y="197" width="0.0110%" height="15" fill="rgb(241,47,5)" fg:x="136561" fg:w="16"/><text x="94.4657%" y="207.50"></text></g><g><title>url-shortener`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (158 samples, 0.11%)</title><rect x="94.2268%" y="197" width="0.1090%" height="15" fill="rgb(233,42,35)" fg:x="136577" fg:w="158"/><text x="94.4768%" y="207.50"></text></g><g><title>url-shortener`axum_core::body::Body::new (27 samples, 0.02%)</title><rect x="94.3530%" y="197" width="0.0186%" height="15" fill="rgb(231,13,6)" fg:x="136760" fg:w="27"/><text x="94.6030%" y="207.50"></text></g><g><title>url-shortener`&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (134,065 samples, 92.49%)</title><rect x="1.9014%" y="213" width="92.4937%" height="15" fill="rgb(207,181,40)" fg:x="2756" fg:w="134065"/><text x="2.1514%" y="223.50">url-shortener`&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.04%)</title><rect x="94.4607%" y="165" width="0.0407%" height="15" fill="rgb(254,173,49)" fg:x="136916" fg:w="59"/><text x="94.7107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (56 samples, 0.04%)</title><rect x="94.4627%" y="149" width="0.0386%" height="15" fill="rgb(221,1,38)" fg:x="136919" fg:w="56"/><text x="94.7127%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (53 samples, 0.04%)</title><rect x="94.4648%" y="133" width="0.0366%" height="15" fill="rgb(206,124,46)" fg:x="136922" fg:w="53"/><text x="94.7148%" y="143.50"></text></g><g><title>url-shortener`&lt;T as tower::util::boxed_clone::CloneService&lt;R&gt;&gt;::clone_box (62 samples, 0.04%)</title><rect x="94.4593%" y="181" width="0.0428%" height="15" fill="rgb(249,21,11)" fg:x="136914" fg:w="62"/><text x="94.7093%" y="191.50"></text></g><g><title>url-shortener`&lt;axum::routing::route::Route&lt;E&gt; as core::clone::Clone&gt;::clone (74 samples, 0.05%)</title><rect x="94.4517%" y="197" width="0.0511%" height="15" fill="rgb(222,201,40)" fg:x="136903" fg:w="74"/><text x="94.7017%" y="207.50"></text></g><g><title>url-shortener`axum::routing::method_routing::MethodRouter&lt;S,E&gt;::call_with_state (161 samples, 0.11%)</title><rect x="94.4068%" y="213" width="0.1111%" height="15" fill="rgb(235,61,29)" fg:x="136838" fg:w="161"/><text x="94.6568%" y="223.50"></text></g><g><title>url-shortener`axum::routing::route::Route&lt;E&gt;::oneshot_inner_owned (20 samples, 0.01%)</title><rect x="94.5041%" y="197" width="0.0138%" height="15" fill="rgb(219,207,3)" fg:x="136979" fg:w="20"/><text x="94.7541%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.01%)</title><rect x="94.5303%" y="197" width="0.0110%" height="15" fill="rgb(222,56,46)" fg:x="137017" fg:w="16"/><text x="94.7803%" y="207.50"></text></g><g><title>url-shortener`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (37 samples, 0.03%)</title><rect x="94.5434%" y="197" width="0.0255%" height="15" fill="rgb(239,76,54)" fg:x="137036" fg:w="37"/><text x="94.7934%" y="207.50"></text></g><g><title>url-shortener`alloc::raw_vec::finish_grow (27 samples, 0.02%)</title><rect x="94.5503%" y="181" width="0.0186%" height="15" fill="rgb(231,124,27)" fg:x="137046" fg:w="27"/><text x="94.8003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.02%)</title><rect x="94.5510%" y="165" width="0.0179%" height="15" fill="rgb(249,195,6)" fg:x="137047" fg:w="26"/><text x="94.8010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.01%)</title><rect x="94.5552%" y="149" width="0.0138%" height="15" fill="rgb(237,174,47)" fg:x="137053" fg:w="20"/><text x="94.8052%" y="159.50"></text></g><g><title>url-shortener`axum::routing::path_router::Node::at (76 samples, 0.05%)</title><rect x="94.5179%" y="213" width="0.0524%" height="15" fill="rgb(206,201,31)" fg:x="136999" fg:w="76"/><text x="94.7679%" y="223.50"></text></g><g><title>url-shortener`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="94.5959%" y="197" width="0.0221%" height="15" fill="rgb(231,57,52)" fg:x="137112" fg:w="32"/><text x="94.8459%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.02%)</title><rect x="94.6193%" y="181" width="0.0159%" height="15" fill="rgb(248,177,22)" fg:x="137146" fg:w="23"/><text x="94.8693%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.01%)</title><rect x="94.6228%" y="165" width="0.0124%" height="15" fill="rgb(215,211,37)" fg:x="137151" fg:w="18"/><text x="94.8728%" y="175.50"></text></g><g><title>url-shortener`axum::routing::url_params::insert_url_params (94 samples, 0.06%)</title><rect x="94.5724%" y="213" width="0.0649%" height="15" fill="rgb(241,128,51)" fg:x="137078" fg:w="94"/><text x="94.8224%" y="223.50"></text></g><g><title>url-shortener`http::extensions::Extensions::insert (28 samples, 0.02%)</title><rect x="94.6180%" y="197" width="0.0193%" height="15" fill="rgb(227,165,31)" fg:x="137144" fg:w="28"/><text x="94.8680%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.02%)</title><rect x="94.6387%" y="197" width="0.0186%" height="15" fill="rgb(228,167,24)" fg:x="137174" fg:w="27"/><text x="94.8887%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.02%)</title><rect x="94.6400%" y="181" width="0.0172%" height="15" fill="rgb(228,143,12)" fg:x="137176" fg:w="25"/><text x="94.8900%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.01%)</title><rect x="94.6449%" y="165" width="0.0124%" height="15" fill="rgb(249,149,8)" fg:x="137183" fg:w="18"/><text x="94.8949%" y="175.50"></text></g><g><title>url-shortener`bytes::bytes::Bytes::copy_from_slice (32 samples, 0.02%)</title><rect x="94.6373%" y="213" width="0.0221%" height="15" fill="rgb(243,35,44)" fg:x="137172" fg:w="32"/><text x="94.8873%" y="223.50"></text></g><g><title>url-shortener`core::hash::BuildHasher::hash_one (19 samples, 0.01%)</title><rect x="94.6773%" y="213" width="0.0131%" height="15" fill="rgb(246,89,9)" fg:x="137230" fg:w="19"/><text x="94.9273%" y="223.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (16 samples, 0.01%)</title><rect x="94.7063%" y="213" width="0.0110%" height="15" fill="rgb(233,213,13)" fg:x="137272" fg:w="16"/><text x="94.9563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.02%)</title><rect x="94.7401%" y="197" width="0.0221%" height="15" fill="rgb(233,141,41)" fg:x="137321" fg:w="32"/><text x="94.9901%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.02%)</title><rect x="94.7470%" y="181" width="0.0152%" height="15" fill="rgb(239,167,4)" fg:x="137331" fg:w="22"/><text x="94.9970%" y="191.50"></text></g><g><title>url-shortener`core::ptr::drop_in_place&lt;tower::util::oneshot::State&lt;tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;axum_core::body::Body&gt;,http::response::Response&lt;axum_core::body::Body&gt;,core::convert::Infallible&gt;,http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt; (55 samples, 0.04%)</title><rect x="94.7290%" y="213" width="0.0379%" height="15" fill="rgb(209,217,16)" fg:x="137305" fg:w="55"/><text x="94.9790%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (62 samples, 0.04%)</title><rect x="94.7856%" y="197" width="0.0428%" height="15" fill="rgb(219,88,35)" fg:x="137387" fg:w="62"/><text x="95.0356%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (54 samples, 0.04%)</title><rect x="94.7911%" y="181" width="0.0373%" height="15" fill="rgb(220,193,23)" fg:x="137395" fg:w="54"/><text x="95.0411%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.03%)</title><rect x="94.8008%" y="165" width="0.0276%" height="15" fill="rgb(230,90,52)" fg:x="137409" fg:w="40"/><text x="95.0508%" y="175.50"></text></g><g><title>url-shortener`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (156 samples, 0.11%)</title><rect x="94.7746%" y="213" width="0.1076%" height="15" fill="rgb(252,106,19)" fg:x="137371" fg:w="156"/><text x="95.0246%" y="223.50"></text></g><g><title>url-shortener`std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (63 samples, 0.04%)</title><rect x="94.8387%" y="197" width="0.0435%" height="15" fill="rgb(206,74,20)" fg:x="137464" fg:w="63"/><text x="95.0887%" y="207.50"></text></g><g><title>url-shortener`std::sys::sync::mutex::pthread::AllocatedMutex::new (44 samples, 0.03%)</title><rect x="94.8518%" y="181" width="0.0304%" height="15" fill="rgb(230,138,44)" fg:x="137483" fg:w="44"/><text x="95.1018%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.03%)</title><rect x="94.8525%" y="165" width="0.0297%" height="15" fill="rgb(235,182,43)" fg:x="137484" fg:w="43"/><text x="95.1025%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.02%)</title><rect x="94.8580%" y="149" width="0.0241%" height="15" fill="rgb(242,16,51)" fg:x="137492" fg:w="35"/><text x="95.1080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.02%)</title><rect x="94.8629%" y="133" width="0.0193%" height="15" fill="rgb(248,9,4)" fg:x="137499" fg:w="28"/><text x="95.1129%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.01%)</title><rect x="94.8988%" y="165" width="0.0110%" height="15" fill="rgb(210,31,22)" fg:x="137551" fg:w="16"/><text x="95.1488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.05%)</title><rect x="94.8898%" y="197" width="0.0483%" height="15" fill="rgb(239,54,39)" fg:x="137538" fg:w="70"/><text x="95.1398%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (61 samples, 0.04%)</title><rect x="94.8960%" y="181" width="0.0421%" height="15" fill="rgb(230,99,41)" fg:x="137547" fg:w="61"/><text x="95.1460%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (41 samples, 0.03%)</title><rect x="94.9098%" y="165" width="0.0283%" height="15" fill="rgb(253,106,12)" fg:x="137567" fg:w="41"/><text x="95.1598%" y="175.50"></text></g><g><title>url-shortener`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.04%)</title><rect x="94.9388%" y="197" width="0.0386%" height="15" fill="rgb(213,46,41)" fg:x="137609" fg:w="56"/><text x="95.1888%" y="207.50"></text></g><g><title>url-shortener`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (45 samples, 0.03%)</title><rect x="94.9464%" y="181" width="0.0310%" height="15" fill="rgb(215,133,35)" fg:x="137620" fg:w="45"/><text x="95.1964%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.03%)</title><rect x="94.9512%" y="165" width="0.0262%" height="15" fill="rgb(213,28,5)" fg:x="137627" fg:w="38"/><text x="95.2012%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.02%)</title><rect x="94.9560%" y="149" width="0.0214%" height="15" fill="rgb(215,77,49)" fg:x="137634" fg:w="31"/><text x="95.2060%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.01%)</title><rect x="94.9629%" y="133" width="0.0145%" height="15" fill="rgb(248,100,22)" fg:x="137644" fg:w="21"/><text x="95.2129%" y="143.50"></text></g><g><title>url-shortener`http::extensions::Extensions::insert (137 samples, 0.09%)</title><rect x="94.8856%" y="213" width="0.0945%" height="15" fill="rgb(208,67,9)" fg:x="137532" fg:w="137"/><text x="95.1356%" y="223.50"></text></g><g><title>url-shortener`http::header::map::HeaderMap&lt;T&gt;::get (20 samples, 0.01%)</title><rect x="94.9836%" y="213" width="0.0138%" height="15" fill="rgb(219,133,21)" fg:x="137674" fg:w="20"/><text x="95.2336%" y="223.50"></text></g><g><title>url-shortener`http::header::map::HeaderMap&lt;T&gt;::try_insert2 (18 samples, 0.01%)</title><rect x="94.9974%" y="213" width="0.0124%" height="15" fill="rgb(246,46,29)" fg:x="137694" fg:w="18"/><text x="95.2474%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`writev (4,050 samples, 2.79%)</title><rect x="95.0954%" y="197" width="2.7942%" height="15" fill="rgb(246,185,52)" fg:x="137836" fg:w="4050"/><text x="95.3454%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`free_tiny (27 samples, 0.02%)</title><rect x="97.8923%" y="197" width="0.0186%" height="15" fill="rgb(252,136,11)" fg:x="141890" fg:w="27"/><text x="98.1423%" y="207.50"></text></g><g><title>url-shortener`&lt;hyper_util::common::rewind::Rewind&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write_vectored (28 samples, 0.02%)</title><rect x="97.9185%" y="197" width="0.0193%" height="15" fill="rgb(219,138,53)" fg:x="141928" fg:w="28"/><text x="98.1685%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (50 samples, 0.03%)</title><rect x="97.9434%" y="181" width="0.0345%" height="15" fill="rgb(211,51,23)" fg:x="141964" fg:w="50"/><text x="98.1934%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.02%)</title><rect x="97.9565%" y="165" width="0.0214%" height="15" fill="rgb(247,221,28)" fg:x="141983" fg:w="31"/><text x="98.2065%" y="175.50"></text></g><g><title>url-shortener`bytes::bytes::shared_drop (64 samples, 0.04%)</title><rect x="97.9392%" y="197" width="0.0442%" height="15" fill="rgb(251,222,45)" fg:x="141958" fg:w="64"/><text x="98.1892%" y="207.50"></text></g><g><title>url-shortener`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (4,263 samples, 2.94%)</title><rect x="95.0505%" y="213" width="2.9411%" height="15" fill="rgb(217,162,53)" fg:x="137771" fg:w="4263"/><text x="95.3005%" y="223.50">ur..</text></g><g><title>url-shortener`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (34 samples, 0.02%)</title><rect x="98.0227%" y="181" width="0.0235%" height="15" fill="rgb(229,93,14)" fg:x="142079" fg:w="34"/><text x="98.2727%" y="191.50"></text></g><g><title>url-shortener`bytes::bytes_mut::BytesMut::split_to (25 samples, 0.02%)</title><rect x="98.0289%" y="165" width="0.0172%" height="15" fill="rgb(209,67,49)" fg:x="142088" fg:w="25"/><text x="98.2789%" y="175.50"></text></g><g><title>url-shortener`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (84 samples, 0.06%)</title><rect x="97.9917%" y="213" width="0.0580%" height="15" fill="rgb(213,87,29)" fg:x="142034" fg:w="84"/><text x="98.2417%" y="223.50"></text></g><g><title>url-shortener`hyper::proto::h1::decode::Decoder::decode (51 samples, 0.04%)</title><rect x="98.0144%" y="197" width="0.0352%" height="15" fill="rgb(205,151,52)" fg:x="142067" fg:w="51"/><text x="98.2644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (47 samples, 0.03%)</title><rect x="98.1869%" y="197" width="0.0324%" height="15" fill="rgb(253,215,39)" fg:x="142317" fg:w="47"/><text x="98.4369%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (29 samples, 0.02%)</title><rect x="98.1993%" y="181" width="0.0200%" height="15" fill="rgb(221,220,41)" fg:x="142335" fg:w="29"/><text x="98.4493%" y="191.50"></text></g><g><title>url-shortener`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (254 samples, 0.18%)</title><rect x="98.0496%" y="213" width="0.1752%" height="15" fill="rgb(218,133,21)" fg:x="142118" fg:w="254"/><text x="98.2996%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2,036 samples, 1.40%)</title><rect x="98.2504%" y="181" width="1.4047%" height="15" fill="rgb(221,193,43)" fg:x="142409" fg:w="2036"/><text x="98.5004%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.02%)</title><rect x="99.6744%" y="165" width="0.0186%" height="15" fill="rgb(240,128,52)" fg:x="144473" fg:w="27"/><text x="99.9244%" y="175.50"></text></g><g><title>url-shortener`tokio::runtime::io::registration::Registration::poll_ready (47 samples, 0.03%)</title><rect x="99.6957%" y="165" width="0.0324%" height="15" fill="rgb(253,114,12)" fg:x="144504" fg:w="47"/><text x="99.9457%" y="175.50"></text></g><g><title>url-shortener`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (107 samples, 0.07%)</title><rect x="99.6550%" y="181" width="0.0738%" height="15" fill="rgb(215,223,47)" fg:x="144445" fg:w="107"/><text x="99.9050%" y="191.50"></text></g><g><title>url-shortener`&lt;hyper_util::common::rewind::Rewind&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2,164 samples, 1.49%)</title><rect x="98.2400%" y="197" width="1.4930%" height="15" fill="rgb(248,225,23)" fg:x="142394" fg:w="2164"/><text x="98.4900%" y="207.50"></text></g><g><title>url-shortener`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2,261 samples, 1.56%)</title><rect x="98.2255%" y="213" width="1.5599%" height="15" fill="rgb(250,108,0)" fg:x="142373" fg:w="2261"/><text x="98.4755%" y="223.50"></text></g><g><title>url-shortener`bytes::bytes_mut::BytesMut::reserve_inner (70 samples, 0.05%)</title><rect x="99.7371%" y="197" width="0.0483%" height="15" fill="rgb(228,208,7)" fg:x="144564" fg:w="70"/><text x="99.9871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.04%)</title><rect x="99.7447%" y="181" width="0.0407%" height="15" fill="rgb(244,45,10)" fg:x="144575" fg:w="59"/><text x="99.9947%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (52 samples, 0.04%)</title><rect x="99.7496%" y="165" width="0.0359%" height="15" fill="rgb(207,125,25)" fg:x="144582" fg:w="52"/><text x="99.9996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (27 samples, 0.02%)</title><rect x="99.7668%" y="149" width="0.0186%" height="15" fill="rgb(210,195,18)" fg:x="144607" fg:w="27"/><text x="100.0168%" y="159.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (133 samples, 0.09%)</title><rect x="99.8027%" y="181" width="0.0918%" height="15" fill="rgb(249,80,12)" fg:x="144659" fg:w="133"/><text x="100.0527%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (129 samples, 0.09%)</title><rect x="99.8054%" y="165" width="0.0890%" height="15" fill="rgb(221,65,9)" fg:x="144663" fg:w="129"/><text x="100.0554%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__commpage_gettimeofday (18 samples, 0.01%)</title><rect x="99.8944%" y="181" width="0.0124%" height="15" fill="rgb(235,49,36)" fg:x="144792" fg:w="18"/><text x="100.1444%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (166 samples, 0.11%)</title><rect x="99.7937%" y="197" width="0.1145%" height="15" fill="rgb(225,32,20)" fg:x="144646" fg:w="166"/><text x="100.0437%" y="207.50"></text></g><g><title>url-shortener`std::sys::pal::unix::time::Timespec::now (180 samples, 0.12%)</title><rect x="99.7930%" y="213" width="0.1242%" height="15" fill="rgb(215,141,46)" fg:x="144645" fg:w="180"/><text x="100.0430%" y="223.50"></text></g><g><title>url-shortener`&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll (143,847 samples, 99.24%)</title><rect x="0.6789%" y="229" width="99.2425%" height="15" fill="rgb(250,160,47)" fg:x="984" fg:w="143847"/><text x="0.9289%" y="239.50">url-shortener`&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll</text></g><g><title>url-shortener`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (144,270 samples, 99.53%)</title><rect x="0.4540%" y="277" width="99.5343%" height="15" fill="rgb(216,222,40)" fg:x="658" fg:w="144270"/><text x="0.7040%" y="287.50">url-shortener`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>url-shortener`tokio::runtime::task::raw::poll (144,211 samples, 99.49%)</title><rect x="0.4947%" y="261" width="99.4936%" height="15" fill="rgb(234,217,39)" fg:x="717" fg:w="144211"/><text x="0.7447%" y="271.50">url-shortener`tokio::runtime::task::raw::poll</text></g><g><title>url-shortener`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (144,095 samples, 99.41%)</title><rect x="0.5747%" y="245" width="99.4136%" height="15" fill="rgb(207,178,40)" fg:x="833" fg:w="144095"/><text x="0.8247%" y="255.50">url-shortener`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>all (144,945 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="144945"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (144,945 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="144945"/><text x="0.2500%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (144,945 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="144945"/><text x="0.2500%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>url-shortener`std::sys::pal::unix::thread::Thread::new::thread_start (144,945 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="144945"/><text x="0.2500%" y="351.50">url-shortener`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>url-shortener`core::ops::function::FnOnce::call_once{{vtable.shim}} (144,945 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="144945"/><text x="0.2500%" y="335.50">url-shortener`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>url-shortener`std::sys::backtrace::__rust_begin_short_backtrace (144,945 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="144945"/><text x="0.2500%" y="319.50">url-shortener`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>url-shortener`tokio::runtime::task::raw::poll (144,928 samples, 99.99%)</title><rect x="0.0117%" y="293" width="99.9883%" height="15" fill="rgb(206,174,23)" fg:x="17" fg:w="144928"/><text x="0.2617%" y="303.50">url-shortener`tokio::runtime::task::raw::poll</text></g></svg></svg>